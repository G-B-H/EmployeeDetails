/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package employeedetails;

import java.awt.event.KeyEvent;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.IOException;
import static java.lang.Integer.parseInt;
import static java.lang.String.valueOf;
import java.nio.file.Files;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.coobird.thumbnailator.Thumbnails;

/**
 *
 * @author cousc
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    Pattern pName = Pattern.compile("^[a-zA-Z -]{3,50}$");
    Pattern pAge = Pattern.compile("^^[0-9]{1,3}$");
    Pattern pNbr = Pattern.compile("^[0-9+]{10,14}$");
    
    public Home() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rbMale = new javax.swing.JRadioButton();
        rbFemale = new javax.swing.JRadioButton();
        rbOther = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        tfAge = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfContactNbr = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbQualification = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jdDate = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tfAddress = new javax.swing.JTextArea();
        btUpload = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        tfImagePath = new javax.swing.JTextField();
        cbBloodGroup = new javax.swing.JComboBox<>();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        lPictures = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btSearch = new javax.swing.JButton();
        btSave = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btReset = new javax.swing.JButton();
        btPrint = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Employee ID");

        tfID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfIDKeyPressed(evt);
            }
        });

        jLabel3.setText("Name");

        jLabel4.setText("Gender");

        buttonGroup1.add(rbMale);
        rbMale.setText("Male");

        buttonGroup1.add(rbFemale);
        rbFemale.setText("Female");

        buttonGroup1.add(rbOther);
        rbOther.setText("Other");

        jLabel2.setText("Age");

        jLabel5.setText("Blood Group");

        jLabel6.setText("Contact NÂ°");

        jLabel7.setText("Qualification");

        cbQualification.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DG", "TS", "AQ", "SA", "MAt", "ChefC", "Chauff", "AM" }));
        cbQualification.setSelectedIndex(-1);

        jLabel8.setText("DOJ");

        jLabel9.setText("Address");

        tfAddress.setColumns(20);
        tfAddress.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        tfAddress.setForeground(new java.awt.Color(30, 30, 30));
        tfAddress.setRows(5);
        tfAddress.setText("Address, Zipcode, City, Country");
        tfAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfAddressFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfAddressFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(tfAddress);

        btUpload.setIcon(new javax.swing.ImageIcon("D:\\Documents\\INSTA\\Module JAVA\\EmployeeDetails\\data\\img\\image upload.png")); // NOI18N
        btUpload.setText("Upload Image");
        btUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUploadActionPerformed(evt);
            }
        });

        jLabel10.setText("Image Path");

        tfImagePath.setEditable(false);

        cbBloodGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+", "A-", "B+", "B-", "O+", "O-", "AB+", "AB-", "Other", "Unknown" }));
        cbBloodGroup.setSelectedIndex(-1);

        jDesktopPane1.setLayer(lPictures, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lPictures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lPictures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(tfID)
                                            .addComponent(tfName)
                                            .addComponent(tfAge, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfContactNbr)
                                            .addComponent(cbBloodGroup, 0, 100, Short.MAX_VALUE))))
                                .addGap(147, 147, 147)
                                .addComponent(jLabel9))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbQualification, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbMale)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbFemale)))
                                .addGap(18, 18, 18)
                                .addComponent(rbOther))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(jdDate, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(btUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(297, 297, 297)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfImagePath)))
                .addGap(18, 18, 18)
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jDesktopPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(tfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(rbMale)
                                    .addComponent(rbFemale)
                                    .addComponent(rbOther))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(tfAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(cbBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(tfContactNbr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cbQualification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btUpload))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jdDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btSearch.setIcon(new javax.swing.ImageIcon("D:\\Documents\\INSTA\\Module JAVA\\EmployeeDetails\\data\\img\\loupe.png")); // NOI18N
        btSearch.setText("Search");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        btSave.setIcon(new javax.swing.ImageIcon("D:\\Documents\\INSTA\\Module JAVA\\EmployeeDetails\\data\\img\\Save-icon.png")); // NOI18N
        btSave.setText("Save");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        btUpdate.setIcon(new javax.swing.ImageIcon("D:\\Documents\\INSTA\\Module JAVA\\EmployeeDetails\\data\\img\\update.png")); // NOI18N
        btUpdate.setText("Update");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        btDelete.setIcon(new javax.swing.ImageIcon("D:\\Documents\\INSTA\\Module JAVA\\EmployeeDetails\\data\\img\\delete.png")); // NOI18N
        btDelete.setText("Delete");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btReset.setIcon(new javax.swing.ImageIcon("D:\\Documents\\INSTA\\Module JAVA\\EmployeeDetails\\data\\img\\clear.png")); // NOI18N
        btReset.setText("Reset");
        btReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btResetActionPerformed(evt);
            }
        });

        btPrint.setIcon(new javax.swing.ImageIcon("D:\\Documents\\INSTA\\Module JAVA\\EmployeeDetails\\data\\img\\printer.png")); // NOI18N
        btPrint.setText("Print");
        btPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(btSearch)
                .addGap(18, 18, 18)
                .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btReset, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(285, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Gender", "Age", "Blood Group", "Contact NÂ°", "Qualification", "DOJ", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public boolean validatef(String str, Pattern p)
    {
        return p.matcher(str).matches();
    }
    
    public boolean emptycheck()
    {
        if("".equals(tfName.getText()))
        {
            return false;
        }
        if(rbMale.isSelected() == false && rbFemale.isSelected() == false && rbOther.isSelected() == false)
        {
            return false;
        }
        if("".equals(tfAge.getText()))
        {
            return false;
        }
        if(cbBloodGroup.getSelectedIndex() == -1)
        {
            return false;
        }
        if("".equals(tfContactNbr.getText()))
        {
            return false;
        }
        if(cbQualification.getSelectedIndex() == -1)
        {
            return false;
        }
        if(jdDate.getDate() == null)
        {
            return false;
        }
        if("".equals(tfAddress.getText()))
        {
            return false;
        }
        if("".equals(tfImagePath.getText()))
        {
            return false;
        }
        return true;
    }
    
    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        try {
            // TODO add your handling code here:
            
            Employee emp = new Employee();
            emp.employeeID = parseInt(tfID.getText());
            emp = MySqlConnect.read(emp.employeeID);
            
            DefaultTableModel tbModel = (DefaultTableModel)jTable1.getModel();
            tbModel.setRowCount(0);
            Object rowData[]= new Object[9];
            
            rowData[0] = emp.employeeID;
            rowData[1] = emp.employeeName;
            rowData[2] = emp.employeeGender;
            rowData[3] = emp.employeeAge;
            rowData[4] = emp.employeeBloodGroup;
            rowData[5] = emp.employeeContactNbr;
            rowData[6] = emp.employeeQualification;
            rowData[7] = emp.employeeDOJ;
            rowData[8] = emp.employeeAddress;
            
            tbModel.addRow(rowData);
            
            tfID.setText(valueOf(emp.employeeID));
            tfName.setText(emp.employeeName);
            tfAge.setText(valueOf(emp.employeeAge));
            tfContactNbr.setText(emp.employeeContactNbr);
            tfAddress.setText(emp.employeeAddress);
            String path = "data\\pics\\" + emp.employeePicturesPath;
            tfImagePath.setText(path);
            
            if("Male".equals(emp.employeeGender))
            {
                rbMale.setSelected(true);
                rbFemale.setSelected(false);
                rbOther.setSelected(false);
            }
            
            if("Female".equals(emp.employeeGender))
            {
                rbMale.setSelected(false);
                rbFemale.setSelected(true);
                rbOther.setSelected(false);
            }
            
            if("Other".equals(emp.employeeGender))
            {
                rbMale.setSelected(false);
                rbFemale.setSelected(false);
                rbOther.setSelected(true);
            }
            
            cbBloodGroup.setSelectedItem(emp.employeeBloodGroup);
            cbQualification.setSelectedItem(emp.employeeQualification);
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse(emp.employeeDOJ);
            jdDate.setDate(date);
            
            Thumbnails.of(path)
                    .size(236, 222)
                    .toFile(new File ("data\\pics\\thumbnail.jpg"));
            String thumb = "data\\pics\\thumbnail.jpg";
            ImageIcon icon = new ImageIcon(thumb);
            icon.getImage().flush();
            lPictures.setIcon(icon);
            lPictures.setHorizontalAlignment(JLabel.LEFT);
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btSearchActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        // TODO add your handling code here:
        Employee emp = new Employee();
        boolean go = false;
        boolean empty= false;
        boolean name= false;
        boolean age= false;
        boolean nbr= false;
        
        emp.employeeName = tfName.getText();
        if (rbMale.isSelected() == true)
        {
            emp.employeeGender = "Male";
        }
        else if (rbFemale.isSelected() == true)
        {
            emp.employeeGender = "Female";
        }
        else if (rbOther.isSelected() == true)
        {
            emp.employeeGender = "Other";
        }
        emp.employeeAge = parseInt(tfAge.getText());
        emp.employeeBloodGroup = (String) cbBloodGroup.getSelectedItem();
        emp.employeeContactNbr = tfContactNbr.getText();
        emp.employeeQualification = (String) cbQualification.getSelectedItem();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String date =sdf.format(jdDate.getDate());
        emp.employeeDOJ = date;
        emp.employeeAddress = tfAddress.getText();
        emp.employeePicturesPath = tfImagePath.getText();
        
        if(emptycheck()== true)
        {
            empty = true;
        }
        else
        {
            showMessageDialog(null, "Please complete all fields");
        }
        
        if(validatef(emp.employeeName, pName) == true)
        {
            name = true;
        }else
        {
            showMessageDialog(null, "Please use only letters and \"-\" and do not exceed 50 characters");
        }
        
        if(validatef(valueOf(emp.employeeAge), pAge) == true)
        {
            age = true;
        }else
        {
            showMessageDialog(null, "Please enter an age between 1 and 999");
        }
        
        if(validatef(valueOf(emp.employeeContactNbr), pNbr) == true)
        {
            nbr =true;
        }else
        {
            showMessageDialog(null, "Please enter a valid phone number");
        }
        
        if(empty == true && name == true && age == true && nbr == true)
        {
            go = true;
        }
        
        if(go != false)
        {
            try {
            int id = MySqlConnect.create(emp);
            if(id != 0)
            {
                emp.employeeID=id;
                System.out.println("File upload");
                File original = new File(emp.employeePicturesPath);
                File copy = new File("data\\pics\\"+id+"a.jpg");
                Files.copy(original.toPath(), copy.toPath());
                emp.employeePicturesPath = id+"a.jpg";
                //update
                if(MySqlConnect.update(emp)==true)
                {
                    Succed info = new Succed();
                    info.setVisible(true);
                }
                else
                {
                    Failure info = new Failure();
                    info.setVisible(true);
                }
            }
            else
            {
                Failure info = new Failure();
                info.setVisible(true);
            }
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
 
    }//GEN-LAST:event_btSaveActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        // TODO add your handling code here:
        Employee emp = new Employee();
        boolean go = false;
        boolean empty= false;
        boolean name= false;
        boolean age= false;
        boolean nbr= false;
        emp.employeeID = parseInt(tfID.getText());
        emp.employeeName = tfName.getText();
        if (rbMale.isSelected() == true)
        {
            emp.employeeGender = "Male";
        }
        else if (rbFemale.isSelected() == true)
        {
            emp.employeeGender = "Female";
        }
        else if (rbOther.isSelected() == true)
        {
            emp.employeeGender = "Other";
        }
        emp.employeeAge = parseInt(tfAge.getText());
        emp.employeeBloodGroup = (String) cbBloodGroup.getSelectedItem();
        emp.employeeContactNbr = tfContactNbr.getText();
        emp.employeeQualification = (String) cbQualification.getSelectedItem();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String date =sdf.format(jdDate.getDate());
        emp.employeeDOJ = date;
        emp.employeeAddress = tfAddress.getText();
        emp.employeePicturesPath = tfImagePath.getText();
        
        if(emptycheck()== true)
        {
            empty = true;
        }
        else
        {
            showMessageDialog(null, "Please complete all fields");
        }
        
        if(validatef(emp.employeeName, pName) == true)
        {
            name = true;
        }else
        {
            showMessageDialog(null, "Please use only letters and \"-\" and do not exceed 50 characters");
        }
        
        if(validatef(valueOf(emp.employeeAge), pAge) == true)
        {
            age = true;
        }else
        {
            showMessageDialog(null, "Please enter an age between 1 and 999");
        }
        
        if(validatef(valueOf(emp.employeeContactNbr), pNbr) == true)
        {
            nbr =true;
        }else
        {
            showMessageDialog(null, "Please enter a valid phone number");
        }
        
        if(empty == true && name == true && age == true && nbr == true)
        {
            go = true;
        }
        
        if(go != false)
        {
            try {
                if(MySqlConnect.update(emp)==true)
                {
                    Succed info = new Succed();
                    info.setVisible(true);
                    
                    ArrayList<Employee> Employees =  new ArrayList<Employee>();
                    DefaultTableModel tbModel = (DefaultTableModel)jTable1.getModel();

                    int rowsToRemove = tbModel.getRowCount();
                    for(int i = rowsToRemove -1; i>= 0 ; i--)
                    {
                        tbModel.removeRow(i);
                    }

                    Object rowData[]= new Object[9];
                    
                    Employees = MySqlConnect.readAll();
                    for(int i = 0; i < Employees.size(); i++)
                    {
                        rowData[0] = Employees.get(i).employeeID;
                        rowData[1] = Employees.get(i).employeeName;
                        rowData[2] = Employees.get(i).employeeGender;
                        rowData[3] = Employees.get(i).employeeAge;
                        rowData[4] = Employees.get(i).employeeBloodGroup;
                        rowData[5] = Employees.get(i).employeeContactNbr;
                        rowData[6] = Employees.get(i).employeeQualification;
                        rowData[7] = Employees.get(i).employeeDOJ;
                        rowData[8] = Employees.get(i).employeeAddress;
                        tbModel.addRow(rowData);
                    }
                    
                }
                else
                {
                    Failure info = new Failure();
                    info.setVisible(true);
                }
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_btUpdateActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        // TODO add your handling code here:
        Employee emp = new Employee();
        emp.employeeID = parseInt(tfID.getText());
        String str = "data\\pics\\"+emp.employeeID+"a.jpg";
        File file = new File("str");
        file.delete();
        
        try {
            if(MySqlConnect.delete(emp)==true)
            {
                Succed info = new Succed();
                info.setVisible(true);
            }
            else
            {
                Failure info = new Failure();
                info.setVisible(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUploadActionPerformed
        // TODO add your handling code here:  
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = null;
        f = chooser.getSelectedFile();
        if(f != null)
        {
            String filename = f.getAbsolutePath();
            tfImagePath.setText(filename);

            try {
                Thumbnails.of(f)
                        .size(236, 222)
                        .toFile(new File ("data\\pics\\thumbnail.jpg"));
                String thumb = "data\\pics\\thumbnail.jpg";
                ImageIcon icon = new ImageIcon(thumb);
                icon.getImage().flush();
                lPictures.setIcon(icon);
                lPictures.setHorizontalAlignment(JLabel.CENTER);

            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btUploadActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        ArrayList<Employee> Employees =  new ArrayList<Employee>();
        DefaultTableModel tbModel = (DefaultTableModel)jTable1.getModel();
        Object rowData[]= new Object[9];
        try {
            Employees = MySqlConnect.readAll();
            for(int i = 0; i < Employees.size(); i++)
            {
                rowData[0] = Employees.get(i).employeeID;
                rowData[1] = Employees.get(i).employeeName;
                rowData[2] = Employees.get(i).employeeGender;
                rowData[3] = Employees.get(i).employeeAge;
                rowData[4] = Employees.get(i).employeeBloodGroup;
                rowData[5] = Employees.get(i).employeeContactNbr;
                rowData[6] = Employees.get(i).employeeQualification;
                rowData[7] = Employees.get(i).employeeDOJ;
                rowData[8] = Employees.get(i).employeeAddress;
                tbModel.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void btResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btResetActionPerformed
        // TODO add your handling code here:
        tfID.setText("");
        tfName.setText("");
        tfAge.setText("");
        tfContactNbr.setText("");
        tfAddress.setText("Address, Zipcode, City, Country");
        tfImagePath.setText("");
        buttonGroup1.clearSelection();
        cbBloodGroup.setSelectedIndex(-1);
        cbQualification.setSelectedIndex(-1);
        jdDate.setDate(null);
        lPictures.setIcon(null);
        
        
        ArrayList<Employee> Employees =  new ArrayList<Employee>();
        DefaultTableModel tbModel = (DefaultTableModel)jTable1.getModel();
        
        int rowsToRemove = tbModel.getRowCount();
        for(int i = rowsToRemove -1; i>= 0 ; i--)
        {
            tbModel.removeRow(i);
        }
        
        Object rowData[]= new Object[9];
        try {
            Employees = MySqlConnect.readAll();
            for(int i = 0; i < Employees.size(); i++)
            {
                rowData[0] = Employees.get(i).employeeID;
                rowData[1] = Employees.get(i).employeeName;
                rowData[2] = Employees.get(i).employeeGender;
                rowData[3] = Employees.get(i).employeeAge;
                rowData[4] = Employees.get(i).employeeBloodGroup;
                rowData[5] = Employees.get(i).employeeContactNbr;
                rowData[6] = Employees.get(i).employeeQualification;
                rowData[7] = Employees.get(i).employeeDOJ;
                rowData[8] = Employees.get(i).employeeAddress;
                tbModel.addRow(rowData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btResetActionPerformed

    private void tfAddressFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfAddressFocusGained
        // TODO add your handling code here:
        String str = "Address, Zipcode, City, Country";
        if(tfAddress.getText().equals(str))
        {
            tfAddress.setText("");
        }
    }//GEN-LAST:event_tfAddressFocusGained

    private void tfAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfAddressFocusLost
        // TODO add your handling code here:
        String str = "Address, Zipcode, City, Country";
        if("".equals(tfAddress.getText()))
        {
            tfAddress.setText(str);
        }
    }//GEN-LAST:event_tfAddressFocusLost

    private void btPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrintActionPerformed
        try {
            // TODO add your handling code here:
            jTable1.print();
        } catch (PrinterException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btPrintActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int index = jTable1.getSelectedRow();
        TableModel model = jTable1.getModel();
        Employee emp = new Employee();
        emp.employeeID =  Integer.parseInt(model.getValueAt(index, 0).toString());
        try 
        {
            emp = MySqlConnect.read(emp.employeeID);
            tfID.setText(valueOf(emp.employeeID));
            tfName.setText(emp.employeeName);
            tfAge.setText(valueOf(emp.employeeAge));
            tfContactNbr.setText(emp.employeeContactNbr);
            tfAddress.setText(emp.employeeAddress);
            String path = "data\\pics\\" + emp.employeePicturesPath;
            tfImagePath.setText(path);
            
            if("Male".equals(emp.employeeGender))
            {
                rbMale.setSelected(true);
                rbFemale.setSelected(false);
                rbOther.setSelected(false);
            }
            
            if("Female".equals(emp.employeeGender))
            {
                rbMale.setSelected(false);
                rbFemale.setSelected(true);
                rbOther.setSelected(false);
            }
            
            if("Other".equals(emp.employeeGender))
            {
                rbMale.setSelected(false);
                rbFemale.setSelected(false);
                rbOther.setSelected(true);
            }
            
            cbBloodGroup.setSelectedItem(emp.employeeBloodGroup);
            cbQualification.setSelectedItem(emp.employeeQualification);
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse(emp.employeeDOJ);
            jdDate.setDate(date);
            
            //System.out.println(path);
            
            Thumbnails.of(path)
                    .size(236, 222)
                    .toFile(new File ("data\\pics\\thumbnail.jpg"));
            String thumb = "data\\pics\\thumbnail.jpg";
            ImageIcon icon = new ImageIcon(thumb);
            icon.getImage().flush();
            lPictures.setIcon(icon);
            
            lPictures.repaint();
            lPictures.setHorizontalAlignment(JLabel.LEFT);
            System.out.println("Thumbnail done");
            
        } catch (SQLException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void tfIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIDKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            try {
            // TODO add your handling code here:
            
            Employee emp = new Employee();
            emp.employeeID = parseInt(tfID.getText());
            emp = MySqlConnect.read(emp.employeeID);
            
            DefaultTableModel tbModel = (DefaultTableModel)jTable1.getModel();
            tbModel.setRowCount(0);
            Object rowData[]= new Object[9];
            
            rowData[0] = emp.employeeID;
            rowData[1] = emp.employeeName;
            rowData[2] = emp.employeeGender;
            rowData[3] = emp.employeeAge;
            rowData[4] = emp.employeeBloodGroup;
            rowData[5] = emp.employeeContactNbr;
            rowData[6] = emp.employeeQualification;
            rowData[7] = emp.employeeDOJ;
            rowData[8] = emp.employeeAddress;
            
            tbModel.addRow(rowData);
            
            tfID.setText(valueOf(emp.employeeID));
            tfName.setText(emp.employeeName);
            tfAge.setText(valueOf(emp.employeeAge));
            tfContactNbr.setText(emp.employeeContactNbr);
            tfAddress.setText(emp.employeeAddress);
            String path = "data\\pics\\" + emp.employeePicturesPath;
            tfImagePath.setText(path);
            
            if("Male".equals(emp.employeeGender))
            {
                rbMale.setSelected(true);
                rbFemale.setSelected(false);
                rbOther.setSelected(false);
            }
            
            if("Female".equals(emp.employeeGender))
            {
                rbMale.setSelected(false);
                rbFemale.setSelected(true);
                rbOther.setSelected(false);
            }
            
            if("Other".equals(emp.employeeGender))
            {
                rbMale.setSelected(false);
                rbFemale.setSelected(false);
                rbOther.setSelected(true);
            }
            
            cbBloodGroup.setSelectedItem(emp.employeeBloodGroup);
            cbQualification.setSelectedItem(emp.employeeQualification);
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse(emp.employeeDOJ);
            jdDate.setDate(date);
            
            Thumbnails.of(path)
                    .size(236, 222)
                    .toFile(new File ("data\\pics\\thumbnail.jpg"));
            String thumb = "data\\pics\\thumbnail.jpg";
            ImageIcon icon = new ImageIcon(thumb);
            icon.getImage().flush();
            lPictures.setIcon(icon);
            lPictures.setHorizontalAlignment(JLabel.LEFT);
            } catch (SQLException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tfIDKeyPressed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btPrint;
    private javax.swing.JButton btReset;
    private javax.swing.JButton btSave;
    private javax.swing.JButton btSearch;
    private javax.swing.JButton btUpdate;
    private javax.swing.JButton btUpload;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbBloodGroup;
    private javax.swing.JComboBox<String> cbQualification;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JDateChooser jdDate;
    private javax.swing.JLabel lPictures;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JRadioButton rbOther;
    private javax.swing.JTextArea tfAddress;
    private javax.swing.JTextField tfAge;
    private javax.swing.JTextField tfContactNbr;
    private javax.swing.JTextField tfID;
    private javax.swing.JTextField tfImagePath;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables
}
